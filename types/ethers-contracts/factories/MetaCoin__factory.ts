/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MetaCoin, MetaCoinInterface } from "../MetaCoin";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "INITIAL_SUPPLY",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "NAME",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "SYMBOL",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040518060400160405280600f81526020017f626164616f4552433230546f6b656e00000000000000000000000000000000008152506040518060400160405280600281526020017f424400000000000000000000000000000000000000000000000000000000000081525081600390816200008f91906200034b565b5060046200009e82826200034b565b505050620000be33612710620000c4640100000000026401000000009004565b6200045f565b600160a060020a0382166200010d576040517fec442f05000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b620001246000838364010000000062000128810204565b5050565b600160a060020a038316620001575780600260008282546200014b91906200041e565b90915550620001e49050565b600160a060020a03831660009081526020819052604090205481811015620001c5576040517fe450d38c000000000000000000000000000000000000000000000000000000008152600160a060020a0385166004820152602481018290526044810183905260640162000104565b600160a060020a03841660009081526020819052604090209082900390555b600160a060020a038216620002025760028054829003905562000221565b600160a060020a03821660009081526020819052604090208054820190555b81600160a060020a031683600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200026791815260200190565b60405180910390a3505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600281046001821680620002b857607f821691505b602082108103620002f2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111562000346576000818152602081206020601f86010481016020861015620003215750805b6020601f860104820191505b8181101562000342578281556001016200032d565b5050505b505050565b815167ffffffffffffffff81111562000368576200036862000274565b6200038081620003798454620002a3565b84620002f8565b602080601f831160018114620003bc57600084156200039f5750858301515b60028086026008870290910a600019041982161786555062000342565b600085815260208120601f198616915b82811015620003ed57888601518255948401946001909101908401620003cc565b50858210156200040e57878501516008601f88160260020a60001904191681555b5050505050600202600101905550565b8082018082111562000459577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b6108a7806200046f6000396000f3fe608060405234801561001057600080fd5b50600436106100d1576000357c01000000000000000000000000000000000000000000000000000000009004806370a082311161008e57806370a082311461015457806395d89b411461017d578063a3f4df7e14610185578063a9059cbb146101c1578063dd62ed3e146101d4578063f76f8d781461020d57600080fd5b806306fdde03146100d6578063095ea7b3146100f457806318160ddd1461011757806323b872dd146101295780632ff2e9dc1461013c578063313ce56714610145575b600080fd5b6100de610249565b6040516100eb91906106bf565b60405180910390f35b610107610102366004610729565b6102db565b60405190151581526020016100eb565b6002545b6040519081526020016100eb565b610107610137366004610753565b6102f5565b61011b61271081565b604051600081526020016100eb565b61011b61016236600461078f565b600160a060020a031660009081526020819052604090205490565b6100de610319565b6100de6040518060400160405280600f81526020017f626164616f4552433230546f6b656e000000000000000000000000000000000081525081565b6101076101cf366004610729565b610328565b61011b6101e23660046107b1565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6100de6040518060400160405280600281526020017f424400000000000000000000000000000000000000000000000000000000000081525081565b606060038054610258906107e4565b80601f0160208091040260200160405190810160405280929190818152602001828054610284906107e4565b80156102d15780601f106102a6576101008083540402835291602001916102d1565b820191906000526020600020905b8154815290600101906020018083116102b457829003601f168201915b5050505050905090565b6000336102e9818585610336565b60019150505b92915050565b600033610303858285610348565b61030e8585856103e4565b506001949350505050565b606060048054610258906107e4565b6000336102e98185856103e4565b6103438383836001610475565b505050565b600160a060020a0383811660009081526001602090815260408083209386168352929052205460001981146103de57818110156103cf576040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600160a060020a038416600482015260248101829052604481018390526064015b60405180910390fd5b6103de84848484036000610475565b50505050565b600160a060020a038316610427576040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600060048201526024016103c6565b600160a060020a03821661046a576040517fec442f05000000000000000000000000000000000000000000000000000000008152600060048201526024016103c6565b61034383838361057c565b600160a060020a0384166104b8576040517fe602df05000000000000000000000000000000000000000000000000000000008152600060048201526024016103c6565b600160a060020a0383166104fb576040517f94280d62000000000000000000000000000000000000000000000000000000008152600060048201526024016103c6565b600160a060020a03808516600090815260016020908152604080832093871683529290522082905580156103de5782600160a060020a031684600160a060020a03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161056e91815260200190565b60405180910390a350505050565b600160a060020a0383166105a757806002600082825461059c9190610837565b909155506106329050565b600160a060020a03831660009081526020819052604090205481811015610613576040517fe450d38c000000000000000000000000000000000000000000000000000000008152600160a060020a038516600482015260248101829052604481018390526064016103c6565b600160a060020a03841660009081526020819052604090209082900390555b600160a060020a03821661064e5760028054829003905561066d565b600160a060020a03821660009081526020819052604090208054820190555b81600160a060020a031683600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516106b291815260200190565b60405180910390a3505050565b600060208083528351808285015260005b818110156106ec578581018301518582016040015282016106d0565b506000604082860101526040601f19601f8301168501019250505092915050565b8035600160a060020a038116811461072457600080fd5b919050565b6000806040838503121561073c57600080fd5b6107458361070d565b946020939093013593505050565b60008060006060848603121561076857600080fd5b6107718461070d565b925061077f6020850161070d565b9150604084013590509250925092565b6000602082840312156107a157600080fd5b6107aa8261070d565b9392505050565b600080604083850312156107c457600080fd5b6107cd8361070d565b91506107db6020840161070d565b90509250929050565b6002810460018216806107f857607f821691505b602082108103610831577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b808201808211156102ef577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212205af9a79954c98ad0f5a0dc1e236d828f4d08c98e9a9db634b5617bf450243a4464736f6c63430008150033";

type MetaCoinConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MetaCoinConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MetaCoin__factory extends ContractFactory {
  constructor(...args: MetaCoinConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<MetaCoin> {
    return super.deploy(overrides || {}) as Promise<MetaCoin>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MetaCoin {
    return super.attach(address) as MetaCoin;
  }
  override connect(signer: Signer): MetaCoin__factory {
    return super.connect(signer) as MetaCoin__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MetaCoinInterface {
    return new utils.Interface(_abi) as MetaCoinInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MetaCoin {
    return new Contract(address, _abi, signerOrProvider) as MetaCoin;
  }
}
