/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { RedPacket, RedPacketInterface } from "../RedPacket";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "depositor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isEqual",
        type: "bool",
      },
    ],
    name: "DepositMade",
    type: "event",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "totalAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "c",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_isEqual",
        type: "bool",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "grabRedEnvelope",
    outputs: [],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060008054600160a060020a03191633179055610625806100326000396000f3fe608060405260043610610071577c0100000000000000000000000000000000000000000000000000000000600035046306661abd811461007657806312065fe01461009f5780631a39d8ef146100b35780638da5cb5b146100c95780639a4083211461011b578063ed9d3c0e14610130575b600080fd5b34801561008257600080fd5b5061008c60025481565b6040519081526020015b60405180910390f35b3480156100ab57600080fd5b50303161008c565b3480156100bf57600080fd5b5061008c60015481565b3480156100d557600080fd5b506000546100f69073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610096565b61012e6101293660046104da565b610138565b005b61012e6101f3565b600034116101905760405160e560020a62461bcd02815260206004820152600d60248201527f616d6f756e74206d7573743e300000000000000000000000000000000000000060448201526064015b60405180910390fd5b60028290556003805460ff1916821515908117909155346001819055604080519182526020820185905281019190915233907f3789e6d921364216c21a3c70b27ef84dba205003a0bb9634fa058df58ad9419b9060600160405180910390a25050565b6000600254116102485760405160e560020a62461bcd02815260206004820152600d60248201527f636f756e74206d757374203e30000000000000000000000000000000000000006044820152606401610187565b60006001541161029d5760405160e560020a62461bcd02815260206004820152601360248201527f746f74616c416d6f756e74206d757374203e30000000000000000000000000006044820152606401610187565b3360009081526004602052604090205460ff16156103005760405160e560020a62461bcd02815260206004820152601060248201527f796f7520686176652067726162626564000000000000000000000000000000006044820152606401610187565b336000908152600460205260409020805460ff19166001908117909155600254900361036457600154604051339180156108fc02916000818181858888f19350505050158015610354573d6000803e3d6000fd5b50600060018190556002556104c3565b60035460ff16156103d0576000600254600154610381919061056d565b604051909150339082156108fc029083906000818181858888f193505050501580156103b1573d6000803e3d6000fd5b5080600160008282546103c49190610581565b909155506104c3915050565b600080546002546001546040516c01000000000000000000000000338102602083015273ffffffffffffffffffffffffffffffffffffffff9094169390930260348401526048830191909152606882015242608882015260089060a80160408051601f19818403018152919052805160209091012061044f919061059a565b61045a9060016105ae565b90506000600a8260015461046e91906105c1565b610478919061056d565b604051909150339082156108fc029083906000818181858888f193505050501580156104a8573d6000803e3d6000fd5b5080600160008282546104bb9190610581565b909155505050505b600280549060006104d3836105d8565b9190505550565b600080604083850312156104ed57600080fd5b823591506020830135801515811461050457600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008261057c5761057c61050f565b500490565b818103818111156105945761059461053e565b92915050565b6000826105a9576105a961050f565b500690565b808201808211156105945761059461053e565b80820281158282048414176105945761059461053e565b6000816105e7576105e761053e565b50600019019056fea264697066735822122055a71ed679b5fc06b9ddb85dda14e0242a2f6c8d4b97c6b8e5c17c4fc1abc40064736f6c63430008150033";

type RedPacketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RedPacketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RedPacket__factory extends ContractFactory {
  constructor(...args: RedPacketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<RedPacket> {
    return super.deploy(overrides || {}) as Promise<RedPacket>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RedPacket {
    return super.attach(address) as RedPacket;
  }
  override connect(signer: Signer): RedPacket__factory {
    return super.connect(signer) as RedPacket__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RedPacketInterface {
    return new utils.Interface(_abi) as RedPacketInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RedPacket {
    return new Contract(address, _abi, signerOrProvider) as RedPacket;
  }
}
